# -*- coding: utf-8 -*-
# Generated by codesnippet sphinx extension on 2016-03-08

import matplotlib.pyplot as plt
import mdp
import numpy as np

np.random.seed(0)
mdp.numx_rand.seed(1266090063)


def uniform(min_, max_, dims):
    """Return a random number between min_ and max_ ."""
    return mdp.numx_rand.random(dims) * (max_ - min_) + min_


def circumference_distr(center, radius, n):
    """Return n random points uniformly distributed on a circumference."""
    phi = uniform(0, 2 * mdp.numx.pi, (n, 1))
    x = radius * mdp.numx.cos(phi) + center[0]
    y = radius * mdp.numx.sin(phi) + center[1]
    return mdp.numx.concatenate((x, y), axis=1)


def circle_distr(center, radius, n):
    """Return n random points uniformly distributed on a circle."""
    phi = uniform(0, 2 * mdp.numx.pi, (n, 1))
    sqrt_r = mdp.numx.sqrt(uniform(0, radius * radius, (n, 1)))
    x = sqrt_r * mdp.numx.cos(phi) + center[0]
    y = sqrt_r * mdp.numx.sin(phi) + center[1]
    return mdp.numx.concatenate((x, y), axis=1)


def rectangle_distr(center, w, h, n):
    """Return n random points uniformly distributed on a rectangle."""
    x = uniform(-w / 2., w / 2., (n, 1)) + center[0]
    y = uniform(-h / 2., h / 2., (n, 1)) + center[1]
    return mdp.numx.concatenate((x, y), axis=1)


N = 2000

cf1 = circumference_distr([6, -0.5], 2, N)
cf2 = circumference_distr([3, -2], 0.3, N)

cl1 = circle_distr([-5, 3], 0.5, int(N / 2))
cl2 = circle_distr([3.5, 2.5], 0.7, N)

r1 = rectangle_distr([-1.5, 0], 1, 4, N)
r2 = rectangle_distr([+1.5, 0], 1, 4, N)
r3 = rectangle_distr([0, +1.5], 2, 1, int(N / 2))
r4 = rectangle_distr([0, -1.5], 2, 1, int(N / 2))

allPoints = mdp.numx.concatenate([cf1, cf2, cl1, cl2, r1, r2, r3, r4], axis=0)
allPoints = mdp.numx.take(allPoints, mdp.numx_rand.permutation(allPoints.shape[0]), axis=0)

gng = mdp.nodes.GrowingNeuralGasNode(max_nodes=75)

forStep = 500
print(allPoints.shape[0])
for i in range(0, allPoints.shape[0], forStep):
    gng.train(allPoints[i:i + forStep])
    # [...] plotting instructions
gng.stop_training()

nObj = len(gng.graph.connected_components())
print(nObj)


def plot(data, nodes=None):
    plt.scatter(data[:, 0], data[:, 1], c='lightblue', marker='.')
    plt.show()


plot(allPoints)
